from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
import exceptions
from create_bot import dp, bot
import expenses
import categories
from keyboards.kb import main_m, stat_k, del_all_kb, cat_set
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


# @dp.message_handler(commands=['start'])
async def start_w(message: types.Message):
    await message.answer('<b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É:', reply_markup=main_m)


@dp.message_handler(Text(equals=['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']))
async def stat(message: types.Message):
    await message.answer('<b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä</b>', reply_markup=stat_k)


@dp.message_handler(Text(equals=['üîô–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']))
async def back_m(message: types.Message):
    await message.answer('<b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∞—Ç—É:', reply_markup=main_m)


@dp.message_handler(Text(equals=['–£–¥–∞–ª–∏—Ç—å –≤—Å–µ']))
async def del_all(message: types.Message):
    await message.answer('–∞ —é —à—É—Ä–µ‚ùì', reply_markup=del_all_kb)


@dp.message_handler(Text(equals=['‚úî–£–¥–∞–ª–∏—Ç—å']))
async def dyes(message: types.Message):
    id_user = message.from_user.id
    expenses.del_all(id_user)
    await message.answer('–£–¥–∞–ª–∏–ª ü´°', reply_markup=main_m)


@dp.message_handler(Text(equals=['–ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞—Ç—ã']))
async def get_last_exp(message: types.Message):
    id_user = message.from_user.id
    last = expenses.get_last(id_user)
    if not last:
        await message.answer('–†–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ')
        return
    await message.answer('<b>–ù–µ–¥–∞–≤–Ω–∏–µ —Ç—Ä–∞—Ç—ã:</b>')
    for i in last:
        await bot.send_message(
            message.from_user.id, text=f'{i.amount} —Ä—É–±–ª–µ–π –Ω–∞ {i.category_name}({i.time})',
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton('üîù–£–¥–∞–ª–∏—Ç—å', callback_data=f'del{i.id}')))


@dp.callback_query_handler(Text(startswith='del'))
async def del_callback(callback: types.CallbackQuery):
    id_user = callback.from_user.id
    row_id = int(callback.data.replace('del', ''))
    expenses.delete_exp(row_id, id_user)
    await callback.answer(text='–£–¥–∞–ª–∏–ªüóë', show_alert=True)


@dp.message_handler(Text(equals=['–°–µ–≥–æ–¥–Ω—è']))
async def get_all_today(message: types.Message):
    id_user = message.from_user.id
    today = expenses.get_today(id_user)
    if not today:
        await message.answer('–°–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ')
        return
    today_cat = expenses.get_today_categories(id_user)
    today_cat_l = [f'<i>{i.amount} —Ä—É–±–ª–µ–π –Ω–∞ {i.name}</i>'for i in today_cat]
    m = '\n* '.join(today_cat_l)
    await message.answer(f'<b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> {today} —Ä—É–±–ª–µ–π\n\n' + '* ' + m)


@dp.message_handler(Text(equals=['–ú–µ—Å—è—Ü']))
async def get_all_m(message: types.Message):
    id_user = message.from_user.id
    month = expenses.get_month(id_user)
    if not month:
        await message.answer('–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ')
        return
    month_cat = expenses.get_month_categories(id_user)
    month_cat_l = [f'<i>{i.amount} —Ä—É–±–ª–µ–π –Ω–∞ {i.name}</i>'for i in month_cat]
    m = '\n* '.join(month_cat_l)
    await message.answer(f'<b>–í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b> {month} —Ä—É–±–ª–µ–π\n\n' + '* ' + m)


@dp.message_handler(Text(equals=['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏']))
async def get_cat(message: types.Message):
    id_user = message.from_user.id
    c = categories.Categories(id_user).get_all_cat(id_user)
    m = '\n* '.join([f'<b>{i.name}</b>' + ' (' + ', '.join(i.aliases) + ')'for i in c])
    await message.answer('<b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Çüìã</b>' + '\n\n' + '* ' + m, reply_markup=cat_set)


@dp.message_handler(Text(equals=['–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?']))
async def how(message: types.Message):
    await message.answer(
        '<b>–ù–µ–º–Ω–æ–≥–æ –æ –±–æ—Ç–µ</b>\n\n<b>–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?</b>üëÄ\n–≠—Ç–æ –±–æ—Ç - —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∞—à–∏ \
—Ç—Ä–∞—Ç—ã, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –∞ —Ç–∞–∫ –∂–µ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n<b>–ö–∞–∫ –≤–Ω–µ—Å—Ç–∏ —Ç—Ä–∞—Ç—É?üìí\n</b>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤\
 —Ñ–æ—Ä–º–∞—Ç–µ: "–°—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è".–ù–∞–ø—Ä–∏–º–µ—Ä: 300 —Ç–∞–∫—Å–∏\n\n<b>–ë–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π?</b>üí∏\n–î–∞'
    )


# @dp.message_handler()
async def add_exp(message: types.Message):
    id_user = message.from_user.id
    try:
        expense = expenses.add_expenses(message.text, id_user)
    except exceptions.NotCorrectMessage as ex:
        await message.answer(str(ex))
    except exceptions.NotCorrectCategory as ec:
        await message.answer(str(ec))

        return
    await message.answer(f'–¥–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {expense.amount} –Ω–∞ {expense.category_name}')


def register_handlers_other(dp: Dispatcher):
    dp.register_message_handler(start_w, commands=['start'])
    dp.register_message_handler(add_exp)
